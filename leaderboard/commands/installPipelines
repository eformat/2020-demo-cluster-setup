#!/usr/bin/env bash

installPipelines::run() {
 oc apply -f "$(configdir)/pipelines/subscription.yaml" 
 
 sleep 5; while echo && oc get pods -n openshift-pipelines\
   | grep -v -E "(Running|Completed|STATUS)"; do sleep 5; done

 header_text "\n\n######## leaderboard::deploy:: Create Secrets ########\n"

 envsubst < "$(configdir)/leaderboard-deploy-secret.yaml" \
    | oc create -n "$(project)" -f - 

 header_text "\n\n######## leaderboard::deploy:: Patch PodTemplate ########\n"
 # Patch tekton config-defaults  
 oc patch -n openshift-pipelines cm config-defaults \
    --patch "$(cat $(configdir)/pod-template-patch.yaml)"

 header_text "\n\n######## leaderboard::deploy:: Create Pipeline Resources ########\n"
 oc apply -n "$(project)" \
    -f "$(configdir)/leaderboard-pipeline-resources.yaml" \
    -f "$(configdir)/build-quarkus-app.yaml" \
    -f "$(configdir)/leaderboard-deploy-pipeline.yaml"

 header_text "\n\n######## leaderboard::deploy:: Patch 'pipeline' SA ########\n"

  # Patch Pipeline SA 
 oc patch sa -n "$(project)" pipeline \
    --type='json' -p='[{"op": "add", "path": "/secrets/-", "value": {"name": "leaderboard-git" } },
    {"op": "add", "path": "/secrets/-", "value": {"name": "leaderboard-quay" } }]'
}

installPipelines::usage(){
  echo "No parameters"
}

installPipelines::clean(){
  echo "Not implemented"
}

installPipelines::description(){
  echo "Install OpenShift Pipelines via OpenShift Pipelines Operator"
}